<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('partials/meta') %>
    <title>Tensers - Dashboard</title>
    <%- include('partials/links') %>
  </head>
  <body>
    <!-- layout start -->
    <div class="layout-wrapper active w-full h-screen">
      <div class="relative flex w-full">
        <%- include('partials/components/sidebar') %>
        <div
          class="body-wrapper flex-1 overflow-x-hidden dark:bg-darkblack-500"
        >
          <%- include('partials/components/topbar', {title:"Chatbot", description:"Chat with the Tensers AI"}) %>
          <main
          class="flex h-screen flex-col justify-between rounded-lg bg-white dark:border  dark:bg-darkblack-500 w-full m-4"
        >
          <div
            class="flex justify-between border-b border-bgray-300 px-[26px] py-6 dark:border-darkblack-400"
          >
            <h1
              class="text-2xl font-semibold text-bgray-900 dark:text-white"
            >
              Team Chat
            </h1>
            <div class="flex items-center space-x-3">
              <div>
                <img
                  src="./assets/images/avatar/members-3.png"
                  alt="members"
                />
              </div>
              <button
                type="button"
                class="flex h-[36px] w-[36px] items-center justify-center rounded-full bg-bgray-200"
              >
                <svg
                  width="14"
                  height="14"
                  viewBox="0 0 14 14"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M7.75 1C7.75 0.585786 7.41421 0.25 7 0.25C6.58579 0.25 6.25 0.585786 6.25 1V6.25H1C0.585786 6.25 0.25 6.58579 0.25 7C0.25 7.41421 0.585786 7.75 1 7.75H6.25V13C6.25 13.4142 6.58579 13.75 7 13.75C7.41421 13.75 7.75 13.4142 7.75 13V7.75H13C13.4142 7.75 13.75 7.41421 13.75 7C13.75 6.58579 13.4142 6.25 13 6.25H7.75V1Z"
                    fill="#718096"
                  />
                </svg>
              </button>
            </div>
          </div>
          <div class="w-full px-5 py-6 lg:px-[35px] lg:py-[38px] m-4">
            <div class="mb-5 flex flex-col space-y-[32px] dark:bg-darkblack-600 p-4 rounded-lg">
              <div class="flex justify-start">
                <div class="flex items-end space-x-3">
                  <div class="flex items-center space-x-2">
                    <div
                      class="h-[35px] w-[36px] overflow-hidden rounded-full"
                    >
                      <img
                        src="./assets/images/avatar/user-1.png"
                        alt="avater"
                        class="h-full w-full object-cover"
                      />
                    </div>
                    <div
                      class="rounded-lg bg-bgray-100 p-3 dark:bg-darkblack-500"
                    >
                      <p
                        class="text-sm font-medium text-bgray-900 dark:text-white"
                      >
                        Hi, What can I help you with?
                      </p>
                    </div>
                  </div>
                  <span class="text-xs font-medium text-bgray-500"
                    >10:00 PM</span
                  >
                </div>
              </div>
              <div class="flex justify-start">
                <div class="flex items-end space-x-3">
                  <div class="flex items-center space-x-2">
                    <div
                      class="h-[35px] w-[36px] overflow-hidden rounded-full"
                    >
                      <img
                        src="./assets/images/avatar/user-1.png"
                        alt="avater"
                        class="h-full w-full object-cover"
                      />
                    </div>
                    <div>
                      <img
                        src="./assets/images/others/mp3.png"
                        class="block dark:hidden"
                        alt="mp3"
                      />
                      <img
                        src="./assets/images/others/mp3-dark.png"
                        class="hidden dark:block"
                        alt="mp3"
                      />
                    </div>
                  </div>
                  <span class="text-xs font-medium text-bgray-500"
                    >10:00 PM</span
                  >
                </div>
              </div>
              <div class="flex justify-end">
                <div class="flex items-end space-x-3">
                  <span class="text-xs font-medium text-bgray-500"
                    >10:00 PM</span
                  >
                  <div class="flex items-center space-x-2">
                    <div
                      class="rounded-b-lg rounded-l-lg bg-bgray-100 p-3 dark:bg-darkblack-500"
                    >
                      <p
                        class="text-sm font-medium text-bgray-900 dark:text-white"
                      >
                        Hi, What can I help you with?
                      </p>
                    </div>
                    <div
                      class="h-[35px] w-[36px] overflow-hidden rounded-full"
                    >
                      <img
                        src="./assets/images/avatar/user-1.png"
                        alt="avater"
                        class="h-full w-full object-cover"
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div class="flex justify-start">
                <div class="flex items-end space-x-3">
                  <div class="flex items-center space-x-2">
                    <div
                      class="h-[35px] w-[36px] overflow-hidden rounded-full"
                    >
                      <img
                        src="./assets/images/avatar/user-1.png"
                        alt="avater"
                        class="h-full w-full object-cover"
                      />
                    </div>
                    <div
                      class="rounded-lg bg-bgray-100 p-3 dark:bg-darkblack-500"
                    >
                      <p
                        class="text-sm font-medium text-bgray-900 dark:text-white"
                      >
                        Hi, What can I help you with?
                      </p>
                    </div>
                  </div>
                  <span class="text-xs font-medium text-bgray-500"
                    >10:00 PM</span
                  >
                </div>
              </div>
            </div>
            <div class="flex h-[58px] w-full items-center justify-center space-x-4 ">
              <div
                class="flex h-full w-full items-center justify-between rounded-lg border border-transparent bg-bgray-100 px-5 focus-within:border-success-300 dark:border-darkblack-600 dark:bg-darkblack-600 lg:w-[318px]"
              >
                <span>
                  <svg
                    width="15"
                    height="16"
                    viewBox="0 0 15 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M9.66652 4.1112L5.22208 8.55565C4.60843 9.1693 4.60843 10.1642 5.22208 10.7779C5.83573 11.3915 6.83065 11.3915 7.4443 10.7779L11.8887 6.33343C13.116 5.10613 13.116 3.11628 11.8887 1.88898C10.6614 0.661681 8.6716 0.661681 7.4443 1.88898L2.99985 6.33343C1.1589 8.17438 1.1589 11.1591 2.99985 13.0001C4.8408 14.841 7.82557 14.841 9.66652 13.0001L14.111 8.55565"
                      stroke="#CBD5E0"
                      stroke-width="1.5"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </span>
                <label class="w-full">
                  <input
                    type="text"
                    placeholder="Type your Message..."
                    class="w-full border-none bg-bgray-100 p-0 pl-[15px] font-medium placeholder:text-sm placeholder:font-medium placeholder:text-bgray-400 focus:outline-none focus:ring-0 dark:bg-darkblack-600 dark:text-white"
                  />
                </label>
                <span>
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M19 11V12C19 15.866 15.866 19 12 19M5 11V12C5 15.866 8.13401 19 12 19M12 19V22M12 22H15M12 22H9M12 16C9.79086 16 8 14.2091 8 12V6C8 3.79086 9.79086 2 12 2C14.2091 2 16 3.79086 16 6V12C16 14.2091 14.2091 16 12 16Z"
                      stroke="#A0AEC0"
                      stroke-width="1.5"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                </span>
              </div>
              <button type="button">
                <svg
                  width="20"
                  height="18"
                  viewBox="0 0 20 18"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M17.3894 0H2.61094C0.339326 0 -0.844596 2.63548 0.696196 4.26234L3.78568 7.52441C4.23 7.99355 4.47673 8.60858 4.47673 9.24704V15.4553C4.47673 17.8735 7.61615 18.9233 9.13941 17.0145L19.4463 4.09894C20.7775 2.43071 19.5578 0 17.3894 0Z"
                    fill="#22C55E"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>
        </div>
      </div>
    </div>

    <!-- layout end -->
    <%- include('partials/scripts') %>
    <script>
      $(".card-slider").slick({
        dots: true,
        infinite: true,
        autoplay: true,
        speed: 500,
        fade: true,
        cssEase: "linear",
        arrows: false,
      });
      function totalEarn() {
        const ctx_bids = document.getElementById("totalEarn").getContext("2d");
        const bitsMonth = [
          "Jan",
          "Feb",
          "Mar",
          "Afril",
          "May",
          "Jan",
          "Feb",
          "Mar",
          "Afril",
          "May",
          "Feb",
          "Mar",
          "Afril",
          "May",
        ];
        const bitsData = [
          0, 10, 0, 65, 0, 25, 0, 35, 20, 100, 40, 75, 50, 85, 60,
        ];
        const totalEarn = new Chart(ctx_bids, {
          type: "line",
          data: {
            labels: bitsMonth,
            datasets: [
              {
                label: "Visitor",
                data: bitsData,
                backgroundColor: () => {
                  const chart = document
                    .getElementById("totalEarn")
                    .getContext("2d");
                  const gradient = chart.createLinearGradient(0, 0, 0, 450);
                  gradient.addColorStop(0, "rgba(34, 197, 94,0.41)");
                  gradient.addColorStop(0.2, "rgba(255, 255, 255, 0)");

                  return gradient;
                },
                borderColor: "#22C55E",
                pointRadius: 0,
                pointBackgroundColor: "#fff",
                pointBorderColor: "#22C55E",
                borderWidth: 1,
                fill: true,
                fillColor: "#fff",
                tension: 0.4,
              },
            ],
          },
          options: {
            layout: {
              padding: {
                bottom: -20,
              },
            },
            maintainAspectRatio: false,
            responsive: true,
            scales: {
              x: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  display: false,
                },
              },
              y: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  display: false,
                },
              },
            },

            plugins: {
              legend: {
                position: "top",
                display: false,
              },
              title: {
                display: false,
                text: "Visitor: 2k",
              },
              tooltip: {
                enabled: false,
              },
            },
          },
        });
      }
      totalEarn();
      function totalSpendingChart() {
        let ctx_bids = document
          .getElementById("totalSpending")
          .getContext("2d");
        let bitsMonth = [
          "Jan",
          "Feb",
          "Mar",
          "Afril",
          "May",
          "Jan",
          "Feb",
          "Mar",
          "Afril",
          "May",
          "Feb",
          "Mar",
          "Afril",
          "May",
        ];
        let bitsData = [
          0, 10, 0, 65, 0, 25, 0, 35, 20, 100, 40, 75, 50, 85, 60,
        ];
        let totalEarn = new Chart(ctx_bids, {
          type: "line",
          data: {
            labels: bitsMonth,
            datasets: [
              {
                label: "Visitor",
                data: bitsData,
                backgroundColor: () => {
                  const chart = document
                    .getElementById("totalEarn")
                    .getContext("2d");
                  const gradient = chart.createLinearGradient(0, 0, 0, 450);
                  gradient.addColorStop(0, "rgba(34, 197, 94,0.41)");
                  gradient.addColorStop(0.2, "rgba(255, 255, 255, 0)");

                  return gradient;
                },
                borderColor: "#22C55E",
                pointRadius: 0,
                pointBackgroundColor: "#fff",
                pointBorderColor: "#22C55E",
                borderWidth: 1,
                fill: true,
                fillColor: "#fff",
                tension: 0.4,
              },
            ],
          },
          options: {
            layout: {
              padding: {
                bottom: -20,
              },
            },
            maintainAspectRatio: false,
            responsive: true,
            scales: {
              x: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  display: false,
                },
              },
              y: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  display: false,
                },
              },
            },

            plugins: {
              legend: {
                position: "top",
                display: false,
              },
              title: {
                display: false,
                text: "Visitor: 2k",
              },
              tooltip: {
                enabled: false,
              },
            },
          },
        });
      }
      totalSpendingChart();
      function totalGoal() {
        let ctx_bids = document.getElementById("totalGoal").getContext("2d");
        let bitsMonth = [
          "Jan",
          "Feb",
          "Mar",
          "Afril",
          "May",
          "Jan",
          "Feb",
          "Mar",
          "Afril",
          "May",
          "Feb",
          "Mar",
          "Afril",
          "May",
        ];
        let bitsData = [
          0, 10, 0, 65, 0, 25, 0, 35, 20, 100, 40, 75, 50, 85, 60,
        ];
        let totalEarn = new Chart(ctx_bids, {
          type: "line",
          data: {
            labels: bitsMonth,
            datasets: [
              {
                label: "Visitor",
                data: bitsData,
                backgroundColor: () => {
                  const chart = document
                    .getElementById("totalGoal")
                    .getContext("2d");
                  const gradient = chart.createLinearGradient(0, 0, 0, 450);
                  gradient.addColorStop(0, "rgba(34, 197, 94,0.41)");
                  gradient.addColorStop(0.2, "rgba(255, 255, 255, 0)");
                  console.log({ gradient });
                  return gradient;
                },
                borderColor: "#22C55E",
                pointRadius: 0,
                pointBackgroundColor: "#fff",
                pointBorderColor: "#22C55E",
                borderWidth: 1,
                fill: true,
                fillColor: "#fff",
                tension: 0.4,
              },
            ],
          },
          options: {
            layout: {
              padding: {
                bottom: -20,
              },
            },
            maintainAspectRatio: false,
            responsive: true,
            scales: {
              x: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  display: false,
                },
              },
              y: {
                grid: {
                  display: false,
                  drawBorder: false,
                },
                ticks: {
                  display: false,
                },
              },
            },

            plugins: {
              legend: {
                position: "top",
                display: false,
              },
              title: {
                display: false,
                text: "Visitor: 2k",
              },
              tooltip: {
                enabled: false,
              },
            },
          },
        });
      }
      totalGoal();

      let revenueFlowElement = document
        .getElementById("revenueFlow")
        .getContext("2d");
      let month = [
        "Jan",
        "Feb",
        "Mar",
        "April",
        "May",
        "Jun",
        "July",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ];
      let dataSetsLight = [
        {
          label: "My First Dataset",
          data: [1, 5, 2, 2, 6, 7, 8, 7, 3, 4, 1, 3],
          backgroundColor: [
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(250, 204, 21, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
          ],
          borderWidth: 0,
          borderRadius: 5,
        },
        {
          label: "My First Dataset 2",
          data: [5, 2, 4, 2, 5, 8, 3, 7, 3, 4, 1, 3],
          backgroundColor: [
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(255, 120, 75, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
          ],
          borderWidth: 0,
          borderRadius: 5,
        },
        {
          label: "My First Dataset 3",
          data: [2, 5, 3, 2, 5, 6, 9, 7, 3, 4, 1, 3],
          backgroundColor: [
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(74, 222, 128, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
            "rgba(237, 242, 247, 1)",
          ],
          borderWidth: 0,
          borderRadius: 5,
        },
      ];
      let dataSetsDark = [
        {
          label: "My First Dataset",
          data: [1, 5, 2, 2, 6, 7, 8, 7, 3, 4, 1, 3],
          backgroundColor: [
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(250, 204, 21, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
          ],
          borderWidth: 0,
          borderRadius: 5,
        },
        {
          label: "My First Dataset 2",
          data: [5, 2, 4, 2, 5, 8, 3, 7, 3, 4, 1, 3],
          backgroundColor: [
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(255, 120, 75, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
          ],
          borderWidth: 0,
          borderRadius: 5,
        },
        {
          label: "My First Dataset 3",
          data: [2, 5, 3, 2, 5, 6, 9, 7, 3, 4, 1, 3],
          backgroundColor: [
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(74, 222, 128, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
            "rgba(42, 49, 60, 1)",
          ],
          borderWidth: 0,
          borderRadius: 5,
        },
      ];
      let revenueFlow = new Chart(revenueFlowElement, {
        type: "bar",
        data: {
          labels: month,
          datasets: dataSetsLight,
        },
        options: {
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                color: "rgb(243 ,246, 255 ,1)",
              },
              gridLines: {
                zeroLineColor: "transparent",
              },
              ticks: {
                callback(value) {
                  return `${value}% `;
                },
              },
            },
            x: {
              grid: {
                color: "rgb(243 ,246, 255 ,1)",
              },
              gridLines: {
                zeroLineColor: "transparent",
              },
            },
          },
          plugins: {
            legend: {
              display: false,
            },
          },
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
      });
      //pie chart
      let pieChart = document.getElementById("pie_chart").getContext("2d");

      const data = {
        labels: [10, 20, 30],
        datasets: [
          {
            label: "My First Dataset",
            data: [15, 20, 35, 40],
            backgroundColor: ["#1A202C", "#61C660", "#F8CC4B", "#EDF2F7"],
            borderColor: ["#ffffff", "#ffffff", "#ffffff", "#1A202C"],
            hoverOffset: 18,
            borderWidth: 0,
          },
        ],
      };
      const customDatalabels = {
        id: "customDatalabels",
        afterDatasetsDraw(chart, args, pluginOptions) {
          const {
            ctx,
            data,
            chartArea: { top, bottom, left, right, width, height },
          } = chart;
          ctx.save();
          data.datasets[0].data.forEach((datapoint, index) => {
            const { x, y } = chart
              .getDatasetMeta(0)
              .data[index].tooltipPosition();
            ctx.font = "bold 12px sans-serif";
            ctx.fillStyle = data.datasets[0].borderColor[index];
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText(`${datapoint}%`, x, y);
          });
        },
      };
      const config = {
        type: "doughnut",
        data,
        options: {
          maintainAspectRatio: false,
          layout: {
            padding: {
              left: 10,
              right: 10,
              top: 10,
              bottom: 10,
            },
          },
          plugins: {
            legend: {
              display: false,
            },
          },
        },
        plugins: [customDatalabels],
      };

      let pieChartConfiig = new Chart(pieChart, config);

      //chart dark mode
      let themeToggleSwitch = document.getElementById("theme-toggle");

      //onclick

      if (themeToggleSwitch) {
        themeToggleSwitch.addEventListener("click", function () {
          if (
            document.documentElement.classList[0] === "dark" ||
            localStorage.theme === "dark"
          ) {
            revenueFlow.data.datasets = dataSetsDark;
            revenueFlow.options.scales.y.ticks.color = "white";
            revenueFlow.options.scales.x.ticks.color = "white";
            revenueFlow.options.scales.x.grid.color = "#222429";
            revenueFlow.options.scales.y.grid.color = "#222429";
            revenueFlow.update();
          } else {
            revenueFlow.data.datasets = dataSetsLight;
            revenueFlow.options.scales.y.ticks.color = "black";
            revenueFlow.options.scales.x.ticks.color = "black";
            revenueFlow.options.scales.x.grid.color = "rgb(243 ,246, 255 ,1)";
            revenueFlow.options.scales.y.grid.color = "rgb(243 ,246, 255 ,1)";
            revenueFlow.update();
          }
        });
      }

      //initial load
      if (
        localStorage.theme === "dark" ||
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ) {
        revenueFlow.data.datasets = dataSetsDark;
        revenueFlow.options.scales.y.ticks.color = "white";
        revenueFlow.options.scales.x.ticks.color = "white";
        revenueFlow.options.scales.x.grid.color = "#222429";
        revenueFlow.options.scales.y.grid.color = "#222429";
      } else {
        revenueFlow.data.datasets = dataSetsLight;
        revenueFlow.options.scales.y.ticks.color = "black";
        revenueFlow.options.scales.x.ticks.color = "black";
        revenueFlow.options.scales.x.grid.color = "rgb(243 ,246, 255 ,1)";
        revenueFlow.options.scales.y.grid.color = "rgb(243 ,246, 255 ,1)";
      }
      revenueFlow.update();
    </script>
  </body>
</html>
